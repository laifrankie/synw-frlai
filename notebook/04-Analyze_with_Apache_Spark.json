{
	"name": "04-Analyze_with_Apache_Spark",
	"properties": {
		"folder": {
			"name": "Quickstarts"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "frlaispark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "e6918b40-5cf0-4586-9fd1-801ffddbc4eb"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/0b022581-49a8-4393-8b6f-57dda470e935/resourceGroups/rg-frlai-poc-eas-014-synw/providers/Microsoft.Synapse/workspaces/synw-frlai-poc-eas-01/bigDataPools/frlaispark",
				"name": "frlaispark",
				"type": "Spark",
				"endpoint": "https://synw-frlai-poc-eas-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/frlaispark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# **Analyze with Apache Spark**\r\n",
					"https://learn.microsoft.com/en-us/azure/synapse-analytics/get-started-analyze-spark"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Analyze NYC Taxi data with a Spark pool\r\n",
					"%%pyspark\r\n",
					"df = spark.read.load('abfss://01-raw@dlsfrlaipoccdpeas01.dfs.core.windows.net/samplefiles/NYCTrip/NYCTripSmall.parquet', format='parquet')\r\n",
					"display(df.limit(10))"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# the schema of the dataframe \r\n",
					"%%pyspark\r\n",
					"df.printSchema()"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Load the NYC Taxi data into the Spark nyctaxi database\r\n",
					"%%pyspark\r\n",
					"spark.sql(\"CREATE DATABASE IF NOT EXISTS nyctaxi\")\r\n",
					"df.write.mode(\"overwrite\").saveAsTable(\"nyctaxi.trip\")"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Analyze the NYC Taxi data using Spark and notebooks\r\n",
					"%%pyspark\r\n",
					"df = spark.sql(\"SELECT * FROM nyctaxi.trip\") \r\n",
					"display(df)"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Analyze this data and save the results into a table called nyctaxi.passengercountstats\r\n",
					"%%pyspark\r\n",
					"df = spark.sql(\"\"\"\r\n",
					"   SELECT passenger_count,\r\n",
					"       SUM(trip_distance) as SumTripDistance,\r\n",
					"       AVG(trip_distance) as AvgTripDistance\r\n",
					"   FROM nyctaxi.trip\r\n",
					"   WHERE trip_distance > 0 AND passenger_count > 0\r\n",
					"   GROUP BY passenger_count\r\n",
					"   ORDER BY passenger_count\r\n",
					"\"\"\") \r\n",
					"display(df)\r\n",
					"df.write.saveAsTable(\"nyctaxi.passengercountstats\")"
				],
				"execution_count": 5
			}
		]
	}
}